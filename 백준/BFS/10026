#include <iostream>
#include <vector>
#include <queue>
#include <string>
using namespace std;

int N;
vector<string> v; //문자를 담을 2차원 벡터
bool check[101][101]; //방문 여부 표시, 1: 방문
int dx[4] = { 0 ,0, -1, 1 };
int dy[4] = { -1, 1 , 0, 0 };

int answer_norm = 0;
int answer_abnorm = 0;

//BFS 수행
void bfs(int y, int x) {
	queue<pair <int, int>> q;
	q.push({ y, x });
	char c = v[y][x];
	check[y][x] = true;
	while (!q.empty()) {
		pair<int, int> p = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = p.second + dx[i], ny = p.first + dy[i];
			if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;
			if (check[ny][nx] || v[ny][nx] != c) continue;
			q.push({ ny,nx });
			check[ny][nx] = true; //방문 표시
		}
	}
}


int main(void) {

	cin >> N;

	for (int i = 0; i < N; i++) {
		string s;
		cin >> s;
		v.push_back(s);
	}


	for (int j = 0; j < N; j++) {
		for (int i = 0;  i < N; i++) {
			if (!check[j][i]) {
				bfs(j, i);
				answer_norm++;
			}
		}
	}

	fill(&check[0][0], &check[N - 1][N], 0); //check배열 0으로 초기화

	// G를 모두 R로 바꾸기
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			if (v[i][j] == 'G') 
				v[i][j] = 'R';
		}
	}

	for (int j = 0; j < N; j++) {
		for (int i = 0; i < N; i++) {
			if (!check[j][i]) {
				bfs(j, i);
				answer_abnorm++;
			}
		}
	}

	cout << answer_norm << endl << answer_abnorm << endl;

	return 0;
}
